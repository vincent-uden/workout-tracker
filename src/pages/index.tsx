import { type NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";
import { Icon } from "@iconify/react";

import { api } from "../utils/api";
import { useState } from "react";
import {
  Area,
  AreaChart,
  Line,
  ReferenceDot,
  ResponsiveContainer,
  XAxis,
  YAxis,
} from "recharts";

type IndexView = "weight" | "workout" | "nutrition";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  const [activeView, setActiveVew] = useState<IndexView>("weight");

  return (
    <>
      <Head>
        <title>Workout Tracker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" />
        <link
          href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+Condensed:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&family=IBM+Plex+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&display=swap"
          rel="stylesheet"
        />
      </Head>
      <div className="bg-pattern" />
      <div className="bg-pattern-grad" />
      <main className="flex min-h-screen flex-col items-center justify-start">
        <div className="relative top-8 flex flex-row gap-4">
          <Icon
            icon="ion:scale"
            className={`h-8 w-8 text-white transition ${
              activeView == "weight" ? "opacity-100" : "scale-75 opacity-20"
            }`}
            onClick={() => setActiveVew("weight")}
          />
          <Icon
            icon="map:gym"
            className={`h-8 w-8 text-white transition ${
              activeView == "workout" ? "opacity-100" : "scale-75 opacity-20"
            }`}
            onClick={() => setActiveVew("workout")}
          />
          <Icon
            icon="mdi:food-fork-drink"
            className={`h-8 w-8 text-white transition ${
              activeView == "nutrition" ? "opacity-100" : "scale-75 opacity-20"
            }`}
            onClick={() => setActiveVew("nutrition")}
          />
        </div>
        <div className="container flex flex-col items-center justify-center gap-12 py-16">
          <div className="flex flex-col items-center">
            {
              {
                weight: <WeightView />,
                workout: <WorkoutView />,
                nutrition: <NutritionView />,
              }[activeView]
            }
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const WeightView: React.FC = () => {
  const [newWeight, setNewWeight] = useState<string>("");
  const [minW, setMinW] = useState<number>(0);
  const [maxW, setMaxW] = useState<number>(100);

  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );
  const { data: weightEntries, refetch: fetchWeights } =
    api.example.getAllWeightEntries.useQuery(undefined, {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data) => {
        let min = 0;
        let max = 0;
        for (let i = 0; i < data.length; i++) {
          if (data[i]!!.kg < min) {
            min = i;
          }

          if (data[i]!!.kg > max) {
            max = i;
          }
        }

        setMinW(data[min]?.kg ?? 0);
        setMaxW(data[max]?.kg ?? 100);
      },
    });

  const createWeightEntryMut = api.example.addWeightEntry.useMutation({
    onSuccess: () => fetchWeights(),
  });

  const deleteWeightEntryMut = api.example.deleteWeightEntry.useMutation({
    onSuccess: () => fetchWeights(),
  });

  return (
    <div className="flex flex-col items-center justify-start gap-4">
      <div
        className={
          (sessionData ? "block" : "hidden") +
          " flex flex-col items-center justify-start gap-4"
        }
      >
        <div className="h-40 w-screen -translate-x-12">
          <ResponsiveContainer width={"100%"} height={"100%"}>
            <AreaChart
              data={
                weightEntries?.map((v) => {
                  return {
                    name: v.created_at,
                    w: v.kg,
                    x: `${v.created_at.getDate()}/${
                      v.created_at.getMonth() + 1
                    }`,
                  };
                }) ?? []
              }
              margin={{ top: 30, right: 30 }}
            >
              <defs>
                <linearGradient id="colorUv" x1="0" y1="0" x2="0" y2="1">
                  <stop offset="5%" stopColor="#38bdf8" stopOpacity={0.8} />
                  <stop offset="95%" stopColor="#38bdf8" stopOpacity={0} />
                </linearGradient>
              </defs>
              <Area
                type="monotone"
                dataKey="w"
                stroke="#38bdf8aa"
                strokeWidth="2"
                fill="url(#colorUv)"
                label={() => "ASKLJD"}
              />
              <XAxis
                dataKey="x"
                axisLine={false}
                tickLine={false}
                tickMargin={10}
                tick={{ fill: "#38bdf8aa", fontSize: 14 }}
              />
              <YAxis
                domain={[minW, maxW]}
                tickLine={false}
                tick={true}
                axisLine={false}
                width={0}
              />
              {weightEntries?.map((v, i) => {
                return (
                  <ReferenceDot
                    x={i}
                    y={v.kg}
                    r={3}
                    fill="#38bdf8"
                    stroke="#38bdf8"
                    strokeWidth={2}
                    label={{
                      position: "top",
                      value: v.kg,
                      fontSize: 14,
                      fill: "#ddd",
                      offset: 10,
                      fontWeight: "bold",
                    }}
                    key={`ref-dot-${i}`}
                  />
                );
              })}
            </AreaChart>
          </ResponsiveContainer>
        </div>
        <div className="h-4"></div>
        <div className="flex w-full flex-row px-4">
          <p className="grow rounded-l py-2 text-center text-white">1mo</p>
          <p className="grow py-2 text-center text-white/20">3mo</p>
          <p className="grow py-2 text-center text-white/20">6mo</p>
          <p className="grow rounded-r py-2 text-center text-white/20">1y</p>
        </div>
        <div className="h-4"></div>
        <div className="grid grid-cols-3">
          <label
            htmlFor="newWeight"
            className="translate-x-[100%] -translate-y-8 text-gray-200"
          >
            Weight
          </label>
          <input
            type="text"
            name="newWeight"
            id="newWeight"
            placeholder="0.0"
            className="rounded border border-white/20 bg-transparent py-2 text-center font-ibm-cond text-2xl text-white placeholder-white/40 outline-none transition-colors bg-[#18181b]"
            onChange={(e) => {
              setNewWeight(e.target.value);
            }}
            value={newWeight}
          />
          <label
            htmlFor="newWeight"
            className="-translate-x-[100%] -translate-y-8 text-right text-gray-200"
          >
            (kg)
          </label>
        </div>
        <button
          className={`rounded-full ${
            sessionData
              ? "bg-sky-600 hover:bg-sky-500"
              : "bg-white/10 hover:bg-white/20"
          } px-10 py-3 font-semibold text-white no-underline transition`}
          onClick={() => {
            createWeightEntryMut.mutate({ kg: parseFloat(newWeight) });
          }}
        >
          Log Weight
        </button>

        <div className="h-8"></div>

        <div className="mt-12 max-h-40 overflow-y-scroll rounded border border-white/10 p-4">
          <table className="w-full">
            <tbody className="">
              {weightEntries?.map((v, i) => {
                return (
                  <tr key={`wEntries${i}`}>
                    <td className="pr-8 text-right text-white">{v.kg}</td>
                    <td className="pr-8 text-white">
                      {v.created_at.toLocaleDateString()}
                    </td>
                    <td
                      onClick={(_) => deleteWeightEntryMut.mutate({ id: v.id })}
                    >
                      ‚ùå
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>
      <button
        className={`rounded-full ${
          sessionData
            ? "bg-red-500/40 hover:bg-red-500/80"
            : "bg-white/10 hover:bg-white/20"
        } mt-12 px-10 py-3 font-semibold text-white no-underline transition`}
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

const WorkoutView: React.FC = () => {
  return (
    <div className="flex flex-col items-center justify-start gap-4">
      <h1>Workout</h1>
    </div>
  );
};

const NutritionView: React.FC = () => {
  return (
    <div className="flex flex-col items-center justify-start gap-4">
      <h1>Nutrition</h1>
    </div>
  );
};
