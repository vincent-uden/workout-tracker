import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "../utils/api";
import { useState } from "react";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>Workout Tracker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-start">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-4xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Workout Tracker
          </h1>
          <div className="flex flex-col items-center gap-2">
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const [newWeight, setNewWeight] = useState<string>("");

  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  const { data: weightEntries, refetch: fetchWeights } =
    api.example.getAllWeightEntries.useQuery(undefined, {
      enabled: sessionData?.user !== undefined,
    });

  const createWeightEntryMut = api.example.addWeightEntry.useMutation({
    onSuccess: () => fetchWeights(),
  });

  const deleteWeightEntryMut = api.example.deleteWeightEntry.useMutation({
    onSuccess: () => fetchWeights(),
  });

  return (
    <div className="flex flex-col items-center justify-start gap-4">
      <div
        className={
          (sessionData ? "block" : "hidden") +
          " flex flex-col items-center justify-start gap-4"
        }
      >
        <input
          type="text"
          name="newWeight"
          id="newWeight"
          placeholder="Enter Weight (kg)"
          className="border-b-2 border-white/50 bg-transparent text-lg text-white placeholder-white/40 outline-none transition-colors focus:border-white"
          onChange={(e) => {
            setNewWeight(e.target.value);
          }}
          value={newWeight}
        />
        <button
          className={`rounded-full ${
            sessionData
              ? "bg-cyan-500/40 hover:bg-cyan-500/80"
              : "bg-white/10 hover:bg-white/20"
          } px-10 py-3 font-semibold text-white no-underline transition`}
          onClick={() => {
            createWeightEntryMut.mutate({ kg: parseFloat(newWeight) });
          }}
        >
          Log Weight
        </button>
        <div className="max-h-40 overflow-y-scroll border border-white/10 p-4 rounded mt-12">
        <table className="w-full">
          <tbody className="">
            {weightEntries?.map((v, i) => {
              return (
                <tr key={`wEntries${i}`}>
                  <td className="pr-8 text-right text-white">{v.kg}</td>
                  <td className="text-white pr-8">
                    {v.created_at.toLocaleDateString()}
                  </td>
                  <td onClick={(_) => deleteWeightEntryMut.mutate({ id: v.id })}>‚ùå</td>
                </tr>
              );
            })}
          </tbody>
        </table>
        </div>
      </div>
      <button
        className={`rounded-full ${
          sessionData
            ? "bg-red-500/40 hover:bg-red-500/80"
            : "bg-white/10 hover:bg-white/20"
        } px-10 py-3 font-semibold text-white no-underline transition mt-12`}
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
